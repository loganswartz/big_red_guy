//! SeaORM Entity. Generated by sea-orm-codegen 0.10.1

use sea_orm::entity::prelude::*;
use serde::Serialize;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize)]
#[sea_orm(table_name = "parties")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub name: String,
    pub owner_id: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::users::Entity",
        from = "Column::OwnerId",
        to = "super::users::Column::Id",
        on_update = "Cascade",
        on_delete = "Cascade"
    )]
    Users,
    #[sea_orm(has_many = "super::party_memberships::Entity")]
    PartyMemberships,
    #[sea_orm(has_many = "super::wishlists::Entity")]
    Wishlists,
    #[sea_orm(has_many = "super::wishlist_party_assignments::Entity")]
    WishlistPartyAssignments,
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl Related<super::party_memberships::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::PartyMemberships.def()
    }
}

pub struct PartyToPartyMembers;

impl Linked for PartyToPartyMembers {
    type FromEntity = Entity;
    type ToEntity = super::users::Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![
            super::party_memberships::Relation::Parties.def().rev(),
            super::party_memberships::Relation::Users.def(),
        ]
    }
}

impl Related<super::wishlist_party_assignments::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::WishlistPartyAssignments.def()
    }
}

impl Related<super::wishlists::Entity> for Entity {
    fn to() -> RelationDef {
        super::wishlist_party_assignments::Relation::Wishlists.def()
    }
    fn via() -> Option<RelationDef> {
        Some(
            super::wishlist_party_assignments::Relation::Parties
                .def()
                .rev(),
        )
    }
}

impl ActiveModelBehavior for ActiveModel {}
